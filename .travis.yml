language: cpp

git:
  depth: 50

os: linux
arch: arm64-graviton2
group: edge
virt: lxd
dist: bionic
addons:
  apt:
    packages:
      - git-core
      - ninja-build
      - binutils-dev
      - python
      - p7zip-full
      - curl

jobs:
  include:
    - env: LLVM_ENABLE_ASSERTIONS=ON
    - env: LLVM_ENABLE_ASSERTIONS=OFF

script:
  # Install a more recent version of CMake
  - curl -L -o cmake.tar.gz https://github.com/Kitware/CMake/releases/download/v3.20.1/cmake-3.20.1-linux-aarch64.tar.gz
  - mkdir cmake_bin
  - tar -xf cmake.tar.gz --strip 1 -C cmake_bin
  - export PATH="$PWD/cmake_bin/bin:$PATH"
  # Download & extract clang
  - curl -L -o clang.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-11.1.0/clang+llvm-11.1.0-aarch64-linux-gnu.tar.xz
  - mkdir clang_bin
  - tar -xf clang.tar.xz --strip 1 -C clang_bin
  - rm clang.tar.xz
  - export CC="$PWD/clang_bin/bin/clang"
  - export CXX="$PWD/clang_bin/bin/clang++"
  # Build & install LLVM incl. LLD, compiler-rt and the Khronos SPIRV-LLVM-Translator
  - nproc
  - free
  - cmake --version
  - ninja --version
  - mkdir build
  - cd build
  - |
    cmake -G Ninja ../llvm \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_INSTALL_PREFIX=$PWD/../install \
      -DLLVM_ENABLE_PROJECTS='compiler-rt;lld' \
      -DLLVM_TARGETS_TO_BUILD='AArch64;AMDGPU;ARM;AVR;Mips;MSP430;NVPTX;PowerPC;RISCV;WebAssembly;X86' \
      -DLLVM_ENABLE_ASSERTIONS=$LLVM_ENABLE_ASSERTIONS \
      -DLLVM_ENABLE_UNWIND_TABLES=OFF \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DLLVM_ENABLE_LIBEDIT=OFF \
      -DCOMPILER_RT_INCLUDE_TESTS=OFF \
      -DLLVM_INCLUDE_TESTS=OFF \
      -DCOMPILER_RT_USE_LIBCXX=OFF \
      -DLLVM_BINUTILS_INCDIR=/usr/include \
      -DLLVM_STATIC_LINK_CXX_STDLIB=ON
  - |
    # work around out-of-memory kills
    for N in 8 6 4; do
      ninja -j$N -k0 && break
    done
  - ninja -j4 install
  - cd ..
  # Pack installation dir
  - |
    set -eo pipefail
    if [ "$TRAVIS_TAG" != "" ]; then
      artifactID=${TRAVIS_TAG:5}
    else
      artifactID=${TRAVIS_COMMIT:0:8}
    fi
    assertsSuffix=""
    if [ "$LLVM_ENABLE_ASSERTIONS" = "ON" ]; then
      assertsSuffix="-withAsserts"
    fi
    artifactName=llvm-$artifactID-linux-aarch64$assertsSuffix
    mv install $artifactName
    artifact=$artifactName.tar.xz
    echo "Packing $artifact..."
    tar -cf - $artifactName | 7za a $artifact -si -txz -mx9
    ls -lh $artifact

# Travis deploys to the GitHub release matching git tag $TRAVIS_TAG
after_success:
  - |
    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      echo 'Skipping deployment'
    elif [ "$TRAVIS_TAG" = "" ]; then
      echo 'Deploying to CI release'
      export TRAVIS_TAG=CI
    fi

deploy:
  provider: releases
  api_key:
    secure: "vJnenvhXJd8hSiUrwIMTux37WCrEg8ntPJlmks3oSeFSJuD5/jE6ietbBi31GWJ2CNL8SgrVNCYr8zd5dCEiwH3EJHgJwQYf5P0mm6oJ0QcdKMRMBws1xuiHv4Q1o/IOfWt6fFA7xfiU/UXU1aQM21ec4aq1AKg3NpcyYM3k8HzFZVkGgOpedxh0/pQnDjWSma8aHGOjyfYil8dWPyX7X6AO8ju4VNi3b+gd/jXX4j6fIxRBUA6cSiHl86yJGyls2blhyjTEUD/Hp4WL/3qf0Jrd7c/B8M9zA94GTt5rfsnnKwdgLpyZX+xZV6xwzUkCu0D/tD+zriz1Dl1PLaztytTufv5Gvs2uVQcSWCYvd8DjMR/t4qeX3FJqpmgCRF/TK1o5ad0bcxDTu3JMIPxPnz3sTbPwRi26CzVG6rNEB7sfWHzNO9IWBrrGnOkmsOg96R3I1oNXFxsgX3Goy7KRL71mTxjQlw5KdC45hSOYMFcZ8LXVyGK9KldCUYg+OUawCNru+e+glVT3p0fjV/R3LRSEe551+9jsUPXii7gGiKBx0Ivr+00y1wqI0EWy0oWMGlTSfBmE2pw+K+Yfia2CXUVNak8uFRilEcJQVoVj65opM00PsDeiX/HXHNkN4j72AU7uspP5bOXmD4osONJqwvLW9hxCLBNE/ycWL06Wiu4="
  file_glob: true
  file: llvm-*.tar.xz
  skip_cleanup: true
  on:
    tags: true

notifications:
  email: false
